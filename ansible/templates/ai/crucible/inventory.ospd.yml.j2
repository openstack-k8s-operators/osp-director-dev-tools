all:
  vars:
    ##################################
    # Assisted Install Configuration #
    ##################################
    # These options configure Assisted Installer and the resulting cluster
    # https://generator.swagger.io/?url=https://raw.githubusercontent.com/openshift/assisted-service/58a6abd5c99d4e41d939be89cd0962433849a861/swagger.yaml
    # See section: cluster-create-params

    # Cluster name and dns domain combine to give the cluster namespace that will contain OpenShift endpoints
    # e.g. api.clustername.example.lab, worker1.clustername.example.lab
    cluster_name: {{ ocp_cluster_name }}
    base_dns_domain: {{ ocp_domain_name }}

    # OpenShift version
    openshift_full_version: {{ ocp_version }}.{{ ocp_minor_version }}

    # Virtual IP addresses used to access the resulting OpenShift cluster
    api_vip: {{ ocp_ai_bm_cidr_prefix }}.3 # the IP address to be used for api.clustername.example.lab and api-int.clustername.example.lab
    ingress_vip: {{ ocp_ai_bm_cidr_prefix }}.4 # the IP address to be used for *.apps.clustername.example.lab

    ## Allocate virtual IPs via DHCP server. Equivalent to the vip_dhcp_allocation configuration option of Assisted Installer
    vip_dhcp_allocation: false

    # The subnet on which all nodes are (or will be) accessible.
    machine_network_cidr: {{ ocp_ai_bm_cidr_prefix }}.0/24

    # The IP address pool to use for service IP addresses
    service_network_cidr: 172.30.0.0/16

    # Cluster network settings. You are unlikely to need to change these
    cluster_network_cidr: 10.128.0.0/14 # The subnet, internal to the cluster, on which pods will be assigned IPs
    cluster_network_host_prefix: 23 # The subnet prefix length to assign to each individual node.

    # # Cluster network provider. Cannot be changed after cluster is created.
    # # The default is OpenShift SDN unless otherwise specified.
    # network_type: OVNKubernetes
    # network_type: OpenShiftSDN
    network_type: {{ ocp_network_type }}

    ######################################
    # Prerequisite Service Configuration #
    ######################################

    # Flags to enable/disable prerequisite service setup
    # You will need to ensure alternatives are available for anything that will not be automatically set up
    setup_ntp_service: false
    setup_dns_service: false
    setup_registry_service: false # Only required for a Restricted Network installation
    setup_http_store_service: false
    setup_assisted_installer: true # default is true you may wish to turn it off if multiple users are using the same instance.
    setup_sushy_tools: false
    setup_vms: false

    # Use HTTP for sushy-tools
    secure_sushy_tools: false

    # NTP Service
    # ntp_server is the address at which the NTP service is (or will be) available
    ntp_server: {{ ntp_server }}
    # ntp_server_allow is the range of IPs the NTP service will respond to
    # ntp_server_allow: 10.40.0.0/24 # not required if setup_ntp_service is false

    # Mirror Registry Service parameters for a Restricted Network installation

    # use_local_mirror_registry controls if the install process uses a local container registry (mirror_registry) or not.
    # Set this to true to use the mirror registry service set up when `setup_registry_service` is true.
    use_local_mirror_registry: false

    # HTTP Store Configuration
    # ISO name must include the `discovery` directory if you have a SuperMicro machine
    discovery_iso_name: "images/discovery_image_ostest.iso"

    # discovery_iso_server must be discoverable from all BMCs in order for them to mount the ISO hosted there.
    # It is usually necessary to specify different values for KVM nodes and/or physical BMCs if they are on different subnets.
    discovery_iso_server: "http://{{ '{{' }} hostvars['http_store']['ansible_host'] {{ '}}' }}"

    ############################
    # Local File Configuration #
    ############################

    repo_root_path: {{ base_path }}/crucible/ # path to repository root

    # Directory in which created/updated artifacts are placed
    fetched_dest: "{{ '{{' }} repo_root_path {{ '}}' }}/fetched"

    # Configure possible paths for the pull secret
    # first one found will be used
    # note: paths should be absolute
    pull_secret_lookup_paths:
{% if secrets_repo is undefined %}
      - "{{ base_path }}/pull-secret"
{% else %}
      - "{{ secrets_repo_path }}/pull-secret"
{% endif %}

    # Configure possible paths for the ssh public key used for debugging
    # first one found will be used
    # note: paths should be absolute
    ssh_public_key_lookup_paths:
      - /root/.ssh/id_rsa.pub

    # Set the base directory to store ssh keys
    ssh_key_dest_base_dir: {{ base_path }}

    # Do not generate SSH keys, use existing
    generate_ssh_keys: false

    # Extra manifests to apply against the cluster during install
    manifest_templates_for_mode:
      none:
        - 50-worker-nm-fix-ipv6.yml
        - 50-worker-remove-ipi-leftovers.yml
        # - 02-fix-ingress-config.yml     # Applying this fix breaks the ingress controller on SNO.
        # - 01-master-node-scheduler.yml  # The master node on SNO is automatically marked as schedulable.
      full:
{% for ocp_node_role in ocp_node_roles %}
        - 50-{{ ocp_node_role }}-RH-Root-CA.yml
{% endfor %}
        - 50-worker-nm-fix-ipv6.yml
        - 50-worker-remove-ipi-leftovers.yml
        - 02-fix-ingress-config.yml
        - 01-master-node-scheduler.yml

    # The retrieved cluster kubeconfig will be placed on the bastion host at the following location
    kubeconfig_dest_dir: {{ base_path }}/
    kubeconfig_dest_filename: "{{ ocp_cluster_name }}-kubeconfig"

    # Prevent sushy-tools from being overwhelmed
    use_boot_iso_strategy_free: false

    ############################
    #    LOGIC: DO NOT TOUCH   #
    # vvvvvvvvvvvvvvvvvvvvvvvv #
    ############################

    # pull secret logic, no need to change. Configure above
    local_pull_secret_path: "{{ '{{' }} lookup('first_found', pull_secret_lookup_paths) {{ '}}' }}"
    pull_secret: "{{ '{{' }} lookup('file', local_pull_secret_path) {{ '}}' }}"

    # ssh key logic, no need to change. Configure above
    local_ssh_public_key_path: "{{ '{{' }} lookup('first_found', ssh_public_key_lookup_paths) {{ '}}' }}"
    # we actually ignore the "do not touch" admonition and force root SSH pub key here
    ssh_public_key: "{{ ssh_pub_key }}"

    # provided mirror certificate logic, no need to change.
    local_mirror_certificate_path: "{{ '{{' }} (setup_registry_service == true) | ternary(
        fetched_dest + '/' + (hostvars['registry_host']['cert_file_prefix'] | default('registry')) + '.crt',
        repo_root_path + '/mirror_certificate.txt')
      {{ '}}' }}"
    mirror_certificate: "{{ '{{' }} lookup('file', local_mirror_certificate_path) {{ '}}' }}"

    openshift_version: "{{ '{{' }} openshift_full_version.split('.')[:2] | join('.') {{ '}}' }}"

    is_valid_single_node_openshift_config: "{{ '{{' }} (groups['nodes'] | length == 1) and (groups['masters'] | length == 1) {{ '}}' }}"

    ############################
    # ^^^^^^^^^^^^^^^^^^^^^^^^ #
    #    LOGIC: DO NOT TOUCH   #
    ############################


  children:
    bastions: # n.b. Currently only a single bastion is supported
      hosts:
        bastion:
          ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1 # Must be reachable from the Ansible control node
          ansible_connection: local # if your are not running crucible from the bastion then remove this line

    # Configuration and access information for the pre-requisite services
    # TODO: document differences needed for already-deployed and auto-deployed
    services:
      hosts:
        assisted_installer:
          ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1
          ansible_connection: local
          host: {{ ocp_ai_bm_cidr_prefix }}.1
          port: 8090 # Do not change

        registry_host:
          ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1
          ansible_connection: local
          registry_port: 5000
          registry_fqdn: registry.example.lab # use in case of different FQDN for the cert
          cert_common_name: "{{ '{{' }} registry_fqdn {{ '}}' }}"
          cert_country: US
          cert_locality: Raleigh
          cert_organization: Red Hat, Inc.
          cert_organizational_unit: Lab
          cert_state: NC

          # Configure the following secret values in the inventory.vault.yml file
          REGISTRY_HTTP_SECRET: "{{ '{{' }} VAULT_REGISTRY_HOST_REGISTRY_HTTP_SECRET | mandatory {{ '}}' }}"
          disconnected_registry_user: "{{ '{{' }} VAULT_REGISTRY_HOST_DISCONNECTED_REGISTRY_USER | mandatory {{ '}}' }}"
          disconnected_registry_password: "{{ '{{' }} VAULT_REGISTRY_HOST_DISCONNECTED_REGISTRY_PASSWORD | mandatory {{ '}}' }}"

        dns_host:
          ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1
          ansible_connection: local
          # upstream_dns: 8.8.8.8 # an optional upstream dns server
          # The following are required for DHCP setup
          # use_dhcp: true
          # dhcp_range_first: 10.60.0.101
          # dhcp_range_last:  10.60.0.105
          # prefix: 24
          # gateway: 10.60.0.1

        http_store:
          ansible_host: {{ ocp_ai_bm_cidr_prefix~'.1' if not (ocp_cluster_has_bm|bool) else ocp_bmc_interface_ip.stdout }}
          ansible_connection: local

        ntp_host:
          ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1
          ansible_connection: local

    vm_hosts:
      hosts:
        vm_host1: # Required for using "KVM" nodes, ignored if not.
          ansible_user: root
          ansible_host: localhost
          ansible_connection: local
          host_ip_keyword: ansible_host # the varname in the KVM node hostvars which contains the *IP* of the VM
          images_dir: {{ ocp_ai_libvirt_storage_dir }} # directory where qcow images will be placed.
          vm_bridge_ip: {{ ocp_ai_bm_cidr_prefix }}.1 # IP for the bridge between VMs and machine network
          vm_bridge_interface: ens1f0 # Interface to be connected to the bridge. DO NOT use your primary interface.
          dns: {{ ocp_ai_bm_cidr_prefix }}.1 # DNS used by the bridge
          # ssl cert configuration
          # sushy_fqdn: ... # use in case of different FQDN for the cert
          cert_vars_host_var_key: registry_host # Look up cert values from another host by name (excluding cert_common_name)
          # or
          # cert_country: US
          # cert_locality: Raleigh
          # cert_organization: Red Hat, Inc.
          # cert_organizational_unit: Lab
          # cert_state: NC

    # Describe the desired cluster members
    nodes:
      # A minimum of three master nodes are required. More are supported.
      # Worker nodes are not required, but if present there must be two or more.
      #
      # Node Required Vars:
      # - role
      #     - Must be either "master" or "worker", and must match the group
      #
      # - mac
      #     - The MAC address of the node, used as a hardware identifier by Assisted Installer.
      #     - The value set here will be used when creating VMs and must be unique within the network.
      #
      # - vendor
      #     - One of "Dell", "HPE", "Lenovo", "SuperMicro", "KVM" as the supported BMC APIs.
      #     - "KVM" identifies a node as a VM to be created. If a "KVM" node is present,
      #       then a "vm_host" must be defined in the node and a host with that name must exist
      #       inside the "vm_hosts" group.
      #
      # - bmc_address
      # - bmc_user
      # - bmc_password
      #     - details for the BMC that controls the node.
      #     - Must be set to the vm_host for "KVM" nodes.
      #
      # Static IP Vars:
      #   See docs/inventory.md: Network configuration section
      #
      # Optional Vars:
      # - vm_spec
      #     - Specifications for the node:
      #          - cpu_cores
      #          - ram_mib
      #          - disk_size_gb
      #
      # - installation_disk_path
      #     - The value set here will be used by Assisted Installer as the installation disk device
      #       for a given host.
      #     - The value must be a path to the disk device, e.g. /dev/sda
      #     - If not specified, Assisted Installer will pick the first enumerated disk device for a
      #       given host.
      vars:
        # Set the login information for any BMCs. Note that these will be SET on the vm_host virtual BMC.
        bmc_user: "{{ '{{' }} VAULT_NODES_BMC_USER | mandatory {{ '}}' }}"
        bmc_password: "{{ '{{' }} VAULT_NODES_BMC_PASSWORD | mandatory {{ '}}' }}"
      children:
        masters:
          vars:
            role: master
{% if ocp_bm_masters | default({}, true) | length > 0 %}
          hosts:
{% for name, master in ocp_bm_masters.items() %}
            {{ ocp_cluster_name }}-{{ name }}:
              vendor: {{ master.vendor }}
              ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1{{ loop.index0 }}
              mac: "{{ master.bm_mac }}"
              bmc_address: {{ master.bmc_address }}
              bmc_user: {{ master.bmc_username }}
              bmc_password: {{ master.bmc_password }}
              installation_disk_path: {{ master.root_device | default ("/dev/sda") }}
              mac_interface_map:
              - logical_nic_name: {{ master.bm_interface }}
                mac_address: "{{ master.bm_mac }}"
{% if master.disabled_interfaces is defined and master.disabled_interfaces | length > 0 %}
{% for interface in master.disabled_interfaces %}
              - logical_nic_name: {{ interface.name }}
                mac_address: "{{ interface.mac }}"
{% endfor %}
{% endif %}
              network_config:
                raw:
                  interfaces:
                    - name: {{ master.bm_interface }}
                      mac: "{{ master.bm_mac }}"
                      state: up
                      ipv4:
                        enabled: true
                        dhcp: true
                        auto-dns: true
                        auto-gateway: true
                        auto-routes: true
{% if master.disabled_interfaces is defined and master.disabled_interfaces | length > 0 %}
{% for interface in master.disabled_interfaces %}
                    - name: {{ interface.name }}
                      mac: "{{ interface.mac }}"
                      state: up
                      ipv4:
                        enabled: false
                        dhcp: false
                      ipv6:
                        enabled: false
                        dhcp: false
{% endfor %}
{% endif %}
{% endfor %}
{% elif ocp_num_masters > 0 %}
            vendor: KVM
            bmc_address: "{{ ocp_ai_bm_cidr_prefix }}.1:{{ ocp_ai_sushy_port | default('8082', true) }}" # port can be changed using sushy_tools_port on the vm_host
            vm_host: vm_host1
            vm_spec:
              cpu_cores: {{ ocp_master_vcpu }}
              ram_mib: {{ ocp_master_memory }}
              disk_size_gb: {{ ocp_master_disk }}
          hosts:
{% for i in range(0, ocp_num_masters) %}
            {{ ocp_cluster_name }}-master-{{ i }}:
              ansible_host: {{ ocp_ai_bm_cidr_prefix }}.1{{ i }}
              mac: "{{ ocp_ai_bm_bridge_master_mac_prefix }}{{ i }}"
{% endfor %}
{% endif %}

        workers:
          vars:
            role: worker
{% if ocp_bm_workers | default({}, true) | length > 0 %}
          hosts:
{% for name, worker in ocp_bm_workers.items() %}
            {{ ocp_cluster_name }}-{{ name }}:
              vendor: {{ worker.vendor }}
              ansible_host: {{ ocp_ai_bm_cidr_prefix }}.2{{ loop.index0 }}
              mac: "{{ worker.bm_mac }}"
              bmc_address: {{ worker.bmc_address }}
              bmc_user: {{ worker.bmc_username }}
              bmc_password: {{ worker.bmc_password }}
              installation_disk_path: {{ worker.root_device | default ("/dev/sda") }}
              mac_interface_map:
              - logical_nic_name: {{ worker.bm_interface }}
                mac_address: "{{ worker.bm_mac }}"
{% if worker.disabled_interfaces is defined and worker.disabled_interfaces | length > 0 %}
{% for interface in worker.disabled_interfaces %}
              - logical_nic_name: {{ interface.name }}
                mac_address: "{{ interface.mac }}"
{% endfor %}
{% endif %}
              network_config:
                raw:
                  interfaces:
                    - name: {{ worker.bm_interface }}
                      mac: "{{ worker.bm_mac }}"
                      state: up
                      ipv4:
                        enabled: true
                        dhcp: true
                        auto-dns: true
                        auto-gateway: true
                        auto-routes: true
{% if worker.disabled_interfaces is defined and worker.disabled_interfaces | length > 0 %}
{% for interface in worker.disabled_interfaces %}
                    - name: {{ interface.name }}
                      mac: "{{ interface.mac }}"
                      state: up
                      ipv4:
                        enabled: false
                        dhcp: false
                      ipv6:
                        enabled: false
                        dhcp: false
{% endfor %}
{% endif %}
{% endfor %}
{% elif ocp_num_workers > 0 %}
            vendor: KVM
            bmc_address: "{{ ocp_ai_bm_cidr_prefix }}.1:{{ ocp_ai_sushy_port | default('8082', true) }}" # port can be changed using sushy_tools_port on the vm_host
            vm_host: vm_host1
            vm_spec:
              cpu_cores: {{ ocp_worker_vcpu }}
              ram_mib: {{ ocp_worker_memory }}
              disk_size_gb: {{ ocp_worker_disk }}
          hosts:
{% for i in range(0, ocp_num_workers) %}
            {{ ocp_cluster_name }}-worker-{{ i }}:
              ansible_host: {{ ocp_ai_bm_cidr_prefix }}.2{{ i }}
              mac: "{{ ocp_ai_bm_bridge_worker_mac_prefix }}{{ i }}"
{% endfor %}
{% endif %}
