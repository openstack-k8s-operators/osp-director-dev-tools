---
- name: Host Prep
  hosts: convergence_base
  become: true
  become_user: root

  tasks:
    - name: Include variables
      ansible.builtin.include_vars: vars/default.yaml
    - name: Validate proper number of workers (>= 2), if explicit workers are requestd
      ansible.builtin.fail:
        msg: If workers are requested, a minimum of 2 is required
      when: (ocp_worker_count | int > 0 and ocp_worker_count | int < 2)

    - name: Validation for virtual clusters vs baremetal
      block:
        - name: Fail if baremetal nodes are requested and AI is not
          # NOTE: Extra baremetal workers (ocp_bm_extra_workers) should be fine with either dev-scripts or AI
          ansible.builtin.fail:
            msg: baremetal nodes are currently only supported for AI deployments
          when: not ocp_ai | bool and (ocp_bm_masters | default({}) | length > 0 or ocp_bm_workers | default({}) | length > 0)

        - name: Fail if virtual and baremetal nodes of the same role are requested
          ansible.builtin.fail:
            msg: Cannot mix virtual and baremetal nodes of the same role
          when: (ocp_bm_masters | default({}) | length > 0 and ocp_num_masters > 0) or (ocp_bm_workers | default({}) | length > 0 and (ocp_num_workers > 0 or
            ocp_num_extra_workers > 0))

    - name: Validation and tweaks for assisted installer
      when: ocp_ai | bool

      block:
        - name: Fail if RHEL version < 8.3
          ansible.builtin.fail:
            msg: RHEL 8.3+ is required for the assisted installer deployments
          when: ansible_distribution != "RedHat" or ansible_distribution_version | float < 8.3

        - name: Fail if OCP version <= 4.6
          ansible.builtin.fail:
            msg: "OCP version {{ ocp_version }} is not allowed.  Only OCP greater than 4.6 is currently supported for assisted installer deployments."
          when: ocp_version is version('4.6', 'le', strict=True)
    - name: OCS validation checks
      when: (enable_ocs | bool)
      block:
        - name: OCS is only allowed for AI
          ansible.builtin.fail:
            msg: "OCS is only allowed for AI deployments"
          when: not (ocp_ai | bool)

        - name: Number of storage workers must be 3, and must be <= ocp_num_workers
          ansible.builtin.fail:
            msg: "3 (non-extra) worker (or master/worker combo) nodes are required for OCS"
          when: ocp_num_storage_workers < 3 or (ocp_num_storage_workers > ocp_worker_count | int and ocp_num_storage_workers > ocp_master_count | int)

    # Temporary (perhaps) until we can figure out how to find a CNV-4.12 repo for RHEL 9
    - name: CNV validation check
      ansible.builtin.fail:
        msg: Only OCP 4.13+ is supported for RHEL 9 environments, due to CNV repo availability
      when: ocp_version is version('4.12', 'le', strict=True) and ansible_distribution_version | int == 9

    - name: Disconnected validation check
      ansible.builtin.fail:
        msg: Disconnected installs are only supported for assisted installer deployments
      when: (ocp_disconnected_install | bool) and not (ocp_ai | bool)

    - name: Add RH CA to ca store
      block:
        - name: Copy CA cert to anchors dir
          ansible.builtin.copy:
            src: "RH-Root-CA.pem"
            dest: "/etc/pki/ca-trust/source/anchors/"
            mode: "0644"
        - name: Update CAs
          ansible.builtin.command: update-ca-trust extract
    - name: Disable existing repos
      block:
        - name: Get existing repo files
          ansible.builtin.find:
            paths: /etc/yum.repos.d
            patterns: "*.repo"
          register: repos

        - name: Disable any existing repos
          ansible.builtin.replace:
            dest: "{{ item.path }}"
            regexp: "enabled=1"
            replace: "enabled=0"
          with_items: "{{ repos.files }}"

    - name: Register host to subscription manager, metal3 dev scripts use subscription manager for RHEL
      block:
        - name: Use local rhel-subscription info
          when: secrets_repo is undefined
          block:
            - name: Include rhel-subscription info
              ansible.builtin.include_vars: vars/rhel-subscription.yaml
          rescue:
            - name: No rhel-subscription info
              ansible.builtin.pause:
                seconds: 1
                prompt: |
                  vars/rhel-subscription.yaml is not present. You can create this
                  file manually. The format of the file is:

                  rhel_subscription_activation_key: <activation key>
                  rhel_subscription_org_id: "xxxxxxx"

                  If you do not have the file, we will use your manually provisioned
                  subscription
              register: manual_rhel_subscription

        - name: Use secrets_repo
          when: secrets_repo is defined
          block:
            - name: Set secrets_repo_path from configured secrets_repo
              ansible.builtin.set_fact:
                secrets_repo_path: "{{ base_path }}/{{ secrets_repo | urlsplit('hostname') }}/{{ (secrets_repo | urlsplit('path') | splitext)[0] }}"
            - name: Check if secrets_repo directory exists
              ansible.builtin.stat:
                path: "{{ secrets_repo_path }}"
              register: secrets_repo_dir
            - name: Clone the repo specified in secrets_repo
              when: not secrets_repo_dir.stat.exists
              block:
                - name: Create base dir for secrets_repo repo
                  ansible.builtin.file:
                    path: "{{ secrets_repo_path }}"
                    state: directory
                    mode: "0755"
                - name: Clone secrets_repo
                  ansible.builtin.git:
                    repo: "{{ secrets_repo }}"
                    dest: "{{ secrets_repo_path }}"
                    version: "{{ secrets_branch | default('HEAD', true) }}"
                  environment:
                    GIT_SSL_NO_VERIFY: "true"
            - name: Include rhel-subscription info
              ansible.builtin.include_vars: "{{ secrets_repo_path }}/rhel-subscription.yaml"
          rescue:
            - name: No rhel-subscription info
              ansible.builtin.pause:
                seconds: 1
                prompt: |
                  rhel-subscription.yaml is not present in {{ secrets_repo }}. You must create this
                  file. The format of the file is:

                  rhel_subscription_activation_key: <activation key>
                  rhel_subscription_org_id: "xxxxxxx"

                  If you do not have the file, we will use your manually provisioned
                  subscription
              register: manual_rhel_subscription

        - name: Unregister node
          retries: 3
          delay: 3
          ignore_errors: true
          community.general.redhat_subscription:
            state: absent
            activationkey: "{{ rhel_subscription_activation_key }}"
            org_id: "{{ rhel_subscription_org_id }}"
          when: manual_rhel_subscription is undefined

        - name: Register with activationkey and consume subscriptions matching Red Hat Enterprise Server
          retries: 3
          delay: 3
          community.general.redhat_subscription:
            state: present
            force_register: true
            activationkey: "{{ rhel_subscription_activation_key }}"
            org_id: "{{ rhel_subscription_org_id }}"
            pool: "{{ rhel_subscription_pool | default(omit) }}"
            pool_ids: "{{ rhel_subscription_pool_ids | default(omit) }}"
            server_hostname: "{{ rhel_subscription_server_hostname | default(omit) }}"
          when: manual_rhel_subscription is undefined

        - name: Enable required repos
          ansible.builtin.command: subscription-manager repos --enable={{ ' --enable='.join(rhel_repos[ansible_distribution_version | int]) }}
    - name: Install packages and enable services
      block:
        - name: Install packages
          ansible.builtin.package:
            state: installed
            name: "{{ rhel_packages[ansible_distribution_version | int] | list }}"

        - name: Enable helpful services
          ansible.builtin.service:
            name: "{{ item }}"
            enabled: "yes"
            state: started
          with_items:
            - crond
            - libvirtd
            - chronyd
            - tuned
            - firewalld

    - name: Configure time on host
      block:
        - name: Set timezone to GMT
          ansible.builtin.file:
            src: /usr/share/zoneinfo/GMT
            dest: /etc/localtime
            state: link
            force: true

        - name: Install, Configure and Run Chrony
          ansible.builtin.include_role:
            name: chrony
          vars:
            chrony_role_action: all
            chrony_ntp_servers:
              - clock.redhat.com
            chrony_ntp_pools:
              - clock.redhat.com

        - name: Ensure chrony has been restarted
          ansible.builtin.meta: flush_handlers
        - name: Ensure system is NTP time synced
          ansible.builtin.command: chronyc makestep
        - name: Sync HW clock
          ansible.builtin.command: hwclock -w
    - name: Check current tuned profile
      ansible.builtin.command: tuned-adm active
      register: tuned_profile
      changed_when: false

    - name: Set tuned virtualization-host profile
      ansible.builtin.command: /usr/sbin/tuned-adm profile virtual-host
      when: "'Current active profile: virtual-host' not in tuned_profile.stdout"

    - name: Enable nested virt
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/kvm.conf
        regexp: "^options kvm-intel nested=.*"
        line: options kvm-intel nested=1
      register: kvm_conf

    - name: Reload kvm kernel modules
      when: kvm_conf is changed # noqa: no-handler
      block:
        - name: Remove kernel modules
          community.general.modprobe:
            name: "{{ item }}"
            state: absent
          with_items:
            - kvm_intel
            - kvm

        - name: Load kernel modules
          community.general.modprobe:
            name: kvm_intel
            state: present

    - name: Remove home mount point
      ansible.posix.mount:
        path: /home
        backup: true
        state: absent
      register: home_unmounted

    - name: Remove lvm device and resize /
      when: home_unmounted is changed # noqa: no-handler
      block:
        - name: Get VG name
          ansible.builtin.shell: |
            echo $(vgs |grep rhel | awk '{print $1}')
          register: vg
        - name: Remove home logical volume
          community.general.lvol:
            vg: "{{ vg.stdout }}"
            lv: home
            state: absent
            force: true
        - name: Extend / logical volume to consume all remaining space in the volume group
          community.general.lvol:
            vg: "{{ vg.stdout }}"
            lv: root
            size: +100%FREE
          register: lv_resized
        - name: Resize FS on /
          ansible.builtin.command: /usr/sbin/xfs_growfs /
          when: lv_resized is changed # noqa: no-handler

    - name: Allow 'wheel' group to have passwordless sudo
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^%wheel"
        line: "%wheel ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"

    - name: Make sure /home is there as the mount plugin with absent removed it earlier
      ansible.builtin.file:
        path: /home
        state: directory
        mode: "0755"

    - name: Configure NFS server
      ansible.builtin.import_role:
        name: nfs_server

    - name: Masquerade all outgoing traffic
      block:
        - name: Acquire default external interface
          ansible.builtin.shell: |
            ip r | grep default | head -1 | cut -d ' ' -f 5
          register: ext_intf

        - name: Fail when unable to determine external interface
          ansible.builtin.fail:
            msg: |
              Unable to determine external interface
          when: ext_intf.stdout == ""

        - name: Make sure all outgoing traffic via ext_intf get masqueraded
          ansible.builtin.shell: |
            firewall-cmd --direct --permanent --add-rule ipv4 nat POSTROUTING 0 -o "{{ ext_intf.stdout }}" ! -d 172.16.0.0/12 -j MASQUERADE;
            firewall-cmd --reload
